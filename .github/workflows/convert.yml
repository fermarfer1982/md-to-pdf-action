name: Build docs → PDF & DOCX + publish to Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write           # para commitear si quisieras
      pages: write              # para publicar en gh-pages
      id-token: write           # requerido por Pages deploy

    container:
      image: pandoc/latex:latest   # Alpine + Pandoc + LaTeX

    steps:
    # 1. Git dentro del contenedor
    - name: Install Git (+bash) inside container
      run: apk add --no-cache git bash

    # 2. Checkout completo con .git
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 3. Generar PDF y DOCX
    - name: Convert Markdown to PDF & DOCX
      run: |
        mkdir -p dist
        for f in docs/*.md; do
          base=$(basename "$f" .md)
          pandoc "$f" -o "dist/${base}.pdf"  --pdf-engine=xelatex
          pandoc "$f" -o "dist/${base}.docx"
        done

    # 4. Generar index.html minimal con Bootstrap
    - name: Build index.html
      shell: bash  
      run: |
        shopt -s nullglob            # ← evita que el patrón quede sin expandir

        cat > dist/index.html <<'HTML'
        <!DOCTYPE html><html lang="es"><head>
          <meta charset="utf-8"/>
          <meta name="viewport" content="width=device-width,initial-scale=1">
          <title>Informes generados</title>
          <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
        </head><body class="bg-light">
          <div class="container py-5">
            <h1 class="mb-4 text-center">Informes generados</h1>
            <p class="text-muted text-center">Archivos creados automáticamente desde Markdown 🙌</p>
            <div class="row row-cols-1 row-cols-md-2 g-4" id="cards"></div>
          </div>
          <script>const files = [
        HTML

        # —— aquí inyectamos solo los ficheros que EXISTEN ——
        for f in dist/*.pdf dist/*.docx; do
          name=$(basename "$f")
          echo "  { file: '$name' }," >> dist/index.html
        done

        cat >> dist/index.html <<'HTML'
          ];
          const wrap = document.getElementById('cards');
          files.forEach(({file}) => {
            const ext = file.split('.').pop();
            const card = document.createElement('div');
            card.className = 'col';
            card.innerHTML = `
              <div class="card h-100 shadow-sm">
                <div class="card-body d-flex flex-column justify-content-between">
                  <h5 class="card-title mb-3">${file}</h5>
                  <a href="${file}" class="btn btn-primary mt-auto" download>Descargar ${ext.toUpperCase()}</a>
                </div>
              </div>`;
            wrap.appendChild(card);
          });
          </script></body></html>
        HTML

        # Inyecta lista de archivos
        for f in dist/*.{pdf,docx}; do
          name=$(basename "$f")
          echo "  { file: '$name' }," >> dist/index.html
        done

        cat >> dist/index.html <<'HTML'
          ];
          const wrap = document.getElementById('cards');
          files.forEach(({file}) => {
            const ext = file.split('.').pop();
            const card = document.createElement('div');
            card.className = 'col';
            card.innerHTML = `
              <div class="card h-100 shadow-sm">
                <div class="card-body d-flex flex-column justify-content-between">
                  <h5 class="card-title mb-3">${file}</h5>
                  <a href="${file}" class="btn btn-primary mt-auto" download>Descargar ${ext.toUpperCase()}</a>
                </div>
              </div>`;
            wrap.appendChild(card);
          });
          </script>
        </body></html>
        HTML

    # 5. Publicar carpeta dist/ en rama gh-pages
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: dist
        publish_branch: gh-pages
